package com.example.mytodolist;
import android.arch.persistence.db.SupportSQLiteDatabase;
import android.arch.persistence.room.Database;
import android.arch.persistence.room.Room;
import android.arch.persistence.room.RoomDatabase;
import android.content.Context;
import android.os.AsyncTask;
import android.support.annotation.NonNull;

/**
 * Created by core on 16/12/18.
 */

// singleton
// version = 1 is when todo itself is used as primary key
// version = 2 is when we use autogenerated id as primary key
@Database(entities = {Todo.class}, version = 2, exportSchema = false)
public abstract class TodoRoomDatabase extends RoomDatabase{

    public abstract TodoDao todoDao();
    private static TodoRoomDatabase INSTANCE;

    static TodoRoomDatabase getDatabase(final Context context) {
        if(INSTANCE == null) {
            synchronized (TodoRoomDatabase.class) {
                if(INSTANCE == null) {
                    // create database here
                    // uses Room's database builder to create a RoomDatabase object named 'todo_database'
                    // in the application context from the TodoRoomDatabase class
                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(),
                    TodoRoomDatabase.class, "todo_database")
                    .fallbackToDestructiveMigration() // migration strategy: wipes and rebuilds instead of migrating if no Migration object
                    .addCallback(sRoomDatabaseCallback).build();
                }
            }
        }

        return INSTANCE;
    }

    // to delete all content and repopulate the database whenever the app is started
    private static RoomDatabase.Callback sRoomDatabaseCallback = new RoomDatabase.Callback() {
        @Override
        public void onOpen(@NonNull SupportSQLiteDatabase db) {
            super.onOpen(db);
            new PopulateDbAsync(INSTANCE).execute();
        }
    };

    // populate the database in the background
    private static class PopulateDbAsync extends AsyncTask<Void, Void, Void> {
        private final TodoDao mDao;
        String[] todos = {"SMILE :) :)"};

        PopulateDbAsync(TodoRoomDatabase db) {
            mDao = db.todoDao();
        }

        @Override
        protected Void doInBackground(final Void... params) {
            // start the app with clean database every time
            //mDao.deleteAll();

            if(mDao.getAnyTodo().length < 1) {
                for (int i = 0; i < todos.length; i++) {
                    Todo todo = new Todo(todos[i]);
                    mDao.insert(todo);
                }
            }
            return null;
        }
    }

}


